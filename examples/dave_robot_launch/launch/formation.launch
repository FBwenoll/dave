<launch>
  <!--basic args -->
  <arg name="gui" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="world_name" default="$(find dave_worlds)/worlds/dave_ocean_waves.world"/>
  <arg name="velocity_control" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="false"/>

  <!-- params for auv1 -->
  <arg name="auv1" default="virgil"/>
  <arg name="x1" default="0"/>
  <arg name="y1" default="0"/>
  <arg name="z1" default="0"/>
  <arg name="roll1" default="0"/>
  <arg name="pitch1" default="0"/>
  <arg name="yaw1" default="0"/>

  <!-- params for auv2 -->
  <arg name="auv2" default="caracara2"/>
  <arg name="x2" default="10"/>
  <arg name="y2" default="10"/>
  <arg name="z2" default="0"/>
  <arg name="roll2" default="0"/>
  <arg name="pitch2" default="0"/>
  <arg name="yaw2" default="0"/>

  <!-- use Gazebo's empty_world.launch with dave_ocean_waves.world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_name)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="verbose" value="$(arg verbose)"/>
  </include>
  
  <!-- use ned frame north east down -->
  <include file="$(find uuv_assistants)/launch/publish_world_ned_frame.launch"/>

  <!-- world models -->
  <node name="publish_world_models"
        pkg="uuv_assistants"
        type="publish_world_models.py"
        output="screen">
    <rosparam subst_value="true">
      meshes:
          heightmap:
              mesh: package://uuv_gazebo_worlds/models/sand_heightmap/meshes/heightmap.dae
              model: sand_heightmap
          seafloor:
              plane: [2000, 2000, 0.1]
              pose:
                  position: [0, 0, -100]
          north:
              plane: [0.1, 2000, 100]
              pose:
                  position: [1000, 0, -50]
          south:
              plane: [0.1, 2000, 100]
              pose:
                  position: [-1000, 0, -50]
          west:
              plane: [2000, 0.1, 100]
              pose:
                  position: [0, -1000, -50]
          east:
              plane: [2000, 0.1, 100]
              pose:
                  position: [0, 1000, -50]
    </rosparam>
  </node>


  <!-- create the auv1 -->
    <include file="$(find virgil_description)/launch/upload_virgil.launch">
        <arg name="namespace" value="$(arg auv1)"/>
    </include>
  <!-- keyboard control node -->
    <include file="$(find dave_nodes)/launch/keyboard_thrusterop.launch">
    <arg name="namespace" value="$(arg auv1)"/>

    </include>
  <!-- spawn the vehicle -->
    <node name="spawn_$(arg auv1)" pkg="gazebo_ros" type="spawn_model"
        respawn="false" output="screen"
        args="-urdf -x $(arg x1) -y $(arg y1) -z $(arg z1) -R $(arg roll1) -P $(arg pitch1) -Y $(arg yaw1) -model $(arg auv1) -param $(arg auv1)/virgil"/>
  <!-- Robot state publisher subscribes to the custom joint state publisher -->
  <node name="$(arg auv1)_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
    <remap from="robot_description" to="/$(arg auv1)/virgil"/>
  </node>





  <!-- create the auv2 -->
    <include file="$(find caracara_description)/launch/upload_caracara.launch">
        <arg name="namespace" value="$(arg auv2)"/>
    </include>
  <!-- spawn the vehicle -->
    <node name="spawn_$(arg auv2)" pkg="gazebo_ros" type="spawn_model"
        respawn="false" output="screen"
        args="-urdf -x $(arg x2) -y $(arg y2) -z $(arg z2) -R $(arg roll2) -P $(arg pitch2) -Y $(arg yaw2) -model $(arg auv2) -param $(arg auv2)/caracara"/>
  <!-- Robot state publisher subscribes to the custom joint state publisher -->
  <node name="$(arg auv2)_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
    <remap from="robot_description" to="/$(arg auv2)/caracara"/>
  </node>

  </launch>